# -*- coding: utf-8 -*-
"""Kmeans_Deploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11hJDtdIE2faLRhHPv0odPm1pJFEIBM37
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load pre-trained models
scaler = joblib.load('scaler.pkl')
pca_loaded = joblib.load('pca_model.pkl')
kmeans_model = joblib.load('kmeans_model.pkl')

def preprocess_data(df):
    # Apply log transformation to the DataFrame
    df = df.apply(lambda x: np.log1p(x))
    return df

# Streamlit app layout
st.title("Customer Clustering App")

# Create input fields for each column
balance = st.number_input("BALANCE", min_value=0.0)
balance_frequency = st.number_input("BALANCE_FREQUENCY", min_value=0.0, max_value=1.0)
purchases = st.number_input("PURCHASES", min_value=0.0)
oneoff_purchases = st.number_input("ONEOFF_PURCHASES", min_value=0.0)
installments_purchases = st.number_input("INSTALLMENTS_PURCHASES", min_value=0.0)
cash_advance = st.number_input("CASH_ADVANCE", min_value=0.0)
purchases_frequency = st.number_input("PURCHASES_FREQUENCY", min_value=0.0)
oneoff_purchases_frequency = st.number_input("ONEOFF_PURCHASES_FREQUENCY", min_value=0.0)
purchases_installments_frequency = st.number_input("PURCHASES_INSTALLMENTS_FREQUENCY", min_value=0.0)
cash_advance_frequency = st.number_input("CASH_ADVANCE_FREQUENCY", min_value=0.0)
cash_advance_trx = st.number_input("CASH_ADVANCE_TRX", min_value=0)
purchases_trx = st.number_input("PURCHASES_TRX", min_value=0)
credit_limit = st.number_input("CREDIT_LIMIT", min_value=0.0)
payments = st.number_input("PAYMENTS", min_value=0.0)
minimum_payments = st.number_input("MINIMUM_PAYMENTS", min_value=0.0)
prc_full_payment = st.number_input("PRC_FULL_PAYMENT", min_value=0.0, max_value=1.0)
tenure = st.number_input("TENURE", min_value=1)

# Button to submit the input data
if st.button("Submit"):
    # Create a DataFrame from user inputs
    input_data = {
        "BALANCE": [balance],
        "BALANCE_FREQUENCY": [balance_frequency],
        "PURCHASES": [purchases],
        "ONEOFF_PURCHASES": [oneoff_purchases],
        "INSTALLMENTS_PURCHASES": [installments_purchases],
        "CASH_ADVANCE": [cash_advance],
        "PURCHASES_FREQUENCY": [purchases_frequency],
        "ONEOFF_PURCHASES_FREQUENCY": [oneoff_purchases_frequency],
        "PURCHASES_INSTALLMENTS_FREQUENCY": [purchases_installments_frequency],
        "CASH_ADVANCE_FREQUENCY": [cash_advance_frequency],
        "CASH_ADVANCE_TRX": [cash_advance_trx],
        "PURCHASES_TRX": [purchases_trx],
        "CREDIT_LIMIT": [credit_limit],
        "PAYMENTS": [payments],
        "MINIMUM_PAYMENTS": [minimum_payments],
        "PRC_FULL_PAYMENT": [prc_full_payment],
        "TENURE": [tenure]
    }

    df_input = pd.DataFrame(input_data)

    # Preprocess the data
    df_processed = preprocess_data(df_input)

    # Scale the data
    df_scaled = pd.DataFrame(scaler.transform(df_processed), columns=df_processed.columns)

    # Apply PCA
    X_new_pca_4 = pca_loaded.transform(df_scaled)

    # Perform clustering using the KMeans model
    clusters = kmeans_model.predict(X_new_pca_4)

    # Add the cluster label to the input DataFrame
    df_input['Cluster'] = clusters

    # Display the processed data with clusters
    st.write("Processed Data with Clusters", df_input)