# -*- coding: utf-8 -*-
"""Credit_Card_Custormer_Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DZTJBcMLqWsIDOAaMt8EDoPvVCs1tGo3

# 1. Importing necessary Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from scipy.spatial.distance import cdist, pdist
import plotly.graph_objs as go
import plotly
import plotly.express as px
plotly.offline.init_notebook_mode()
import pickle
import json

"""# 2. Loading the data"""

df = pd.read_csv("Credit Card_Clustering.csv")
df.shape

"""👉 The data set contains details of 8,950 credit card holders.

# 3. EDA 🔍
"""

df.head()

"""👉 In the  dataset all columns are readable."""

df.info()

"""👉 There are **18 variables** in this data set:
*   **1 categorical** variable (CUST_ID),
*   **14 continuous** variables,
*    **3 discrete numerical** variables
"""

num_cols = df.select_dtypes(include='number').columns
num_cols

dist_num_cols=['CASH_ADVANCE_TRX', 'PURCHASES_TRX', 'TENURE']
cont_num_cols=num_cols.symmetric_difference(dist_num_cols)
cont_num_cols

for col in dist_num_cols:
    print(col, df[col].nunique())

df[dist_num_cols].describe().T

df[cont_num_cols].describe().T

bounded_cols = []
unbounded_cols=[]
for col in cont_num_cols:
    min_val = df[col].min()
    max_val = df[col].max()
    if min_val >= 0 and max_val < 2:
        bounded_cols.append(col)
    else:
        unbounded_cols.append(col)

print("Bounded columns:", bounded_cols)
print("Unbounded columns:", unbounded_cols)

plt.figure(figsize=(16,8))
for i, col in enumerate(bounded_cols, 1):
    plt.subplot(2, 4, i)
    sns.kdeplot(x=df[col])
    plt.title(col)

plt.tight_layout()
plt.show()

plt.figure(figsize=(16,8))
for i, col in enumerate(unbounded_cols, 1):
    plt.subplot(2, 4, i)
    sns.kdeplot(x=df[col])
    plt.title(col)

plt.tight_layout()
plt.show()

"""👉 Here unbounded columns  in the dataset are positively skewed, expected due to a few customers with high transaction amounts."""

plt.figure(figsize=(16,8))
for i, col in enumerate(unbounded_cols, 1):
    plt.subplot(2, 4, i)
    sns.boxplot(x=df[col])
    plt.title(col)

plt.tight_layout()
plt.show()

plt.figure(figsize=(16,8))
for i, col in enumerate(unbounded_cols, 1):
    plt.subplot(2, 4, i)
    sns.violinplot(x=df[col])
    plt.title(col)

plt.tight_layout()
plt.show()

corr_matrix=df.corr(numeric_only=True)
corr_matrix.style.background_gradient(cmap='coolwarm')

"""Based on the correlation matrix, here are some pairs with strong correlations (absolute value above 0.6) suggesting potential multicollinearity issues.

* PURCHASES and ONEOFF_PURCHASES: 0.916845
* PURCHASES and PURCHASES_TRX: 0.689561
* ONEOFF_PURCHASES and PURCHASES_TRX: 0.545523
* INSTALLMENTS_PURCHASES and PURCHASES_TRX: 0.628108
* PURCHASES_FREQUENCY and PURCHASES_INSTALLMENTS_FREQUENCY: 0.862934
* CASH_ADVANCE and CASH_ADVANCE_FREQUENCY: 0.628522
* CASH_ADVANCE_FREQUENCY and CASH_ADVANCE_TRX: 0.799561
"""

df.isnull().sum()

"""# 4. Data Preprocessing

Customer ID is unique and won't affect clustering. With only 1 value of CREDIT_LIMIT records having NaN values (just one record), we can drop it without concern. For MINIMUM_PAYMENTS, we can use the median to replace NaN values due to their random nature and the skewed distribution of this feature.
"""

df_new=df.copy()

df_new.drop(['CUST_ID'], axis=1, inplace=True)
columns_to_fill = ['CREDIT_LIMIT', 'MINIMUM_PAYMENTS']

for column in columns_to_fill:
    df_new[column].fillna(df_new[column].median(), inplace=True)

"""## 4.1 Feature Engineering"""

df_new.info()

"""Since the some columns are not bounded, log transformation will be applied to reduce skewness and normalize their distributions."""

df_new = df_new.apply(lambda x: np.log1p(x))

plt.figure(figsize=(16,8))
for i, col in enumerate(unbounded_cols,1):
    plt.subplot(2, 4, i)
    sns.kdeplot(df_new[col])

plt.tight_layout()
plt.show()

corr_matrix=df_new.corr()
corr_matrix.style.background_gradient(cmap='coolwarm')

"""We've identified correlated features and plan to address them through dimensionality reduction using PCA. PCA finds new axes that maximize variance in the data, sequentially selecting components that explain the most variance.

## 4.2 Principal Component Analysis
"""

scaler = StandardScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df_new), columns=df_new.columns)
print(df_scaled.head())

pca_all = PCA(n_components=len(df_scaled.columns), random_state=42)
pca_all.fit(df_scaled)
variance = pca_all.explained_variance_ratio_

plt.figure(figsize=(8,5))
plt.bar(range(1, len(variance) + 1), variance, alpha=0.6, align='center', label='Individual explained variance')
plt.step(range(1, len(variance) + 1), np.cumsum(variance), where='mid', label='Cumulative explained variance', color='red')

plt.xlabel('Principal Components')
plt.ylabel('Explained Variance Ratio')
plt.title('Scree Plot')
plt.xticks(range(1, len(variance) + 1))
plt.legend(loc='best')
plt.grid()
plt.show()

print('information extracted from 6 varibles is {} %'.format(np.sum(variance[:6])*100/np.sum(variance)))
print('information extracted from 8 varibles is {} %'.format(np.sum(variance[:8])*100/np.sum(variance)))
print('information extracted from 4 varibles is {} %'.format(np.sum(variance[:4])*100/np.sum(variance)))
print('information extracted from 10 varibles is {} %'.format(np.sum(variance[:10])*100/np.sum(variance)))

"""\Trade-offs:
Dimensionality Reduction: Fewer variables (e.g., 4) might simplify the model, reduce overfitting, and improve interpretability while still capturing a significant amount of variance (73.23%).
Information Retention: More variables (e.g., 10) provide better performance in terms of explained variance (96.29%), but may risk overfitting, especially with smaller datasets.
"""

pca_4 = PCA(n_components=4,  random_state=42)
X_pca_4= pca_4.fit_transform(df_scaled)
X_pca_4

"""# 5. Model Training"""

import plotly.io as pio
pio.renderers.default = 'colab'

avg_withinSS = []
number_of_cluster = range(2, 11)

for i in number_of_cluster:
    kmeans = KMeans(n_clusters=i, n_init=20, random_state=42)
    kmeans.fit(X_pca_4)
    centroids = kmeans.cluster_centers_

    D_k = cdist(X_pca_4, centroids, 'euclidean')
    dist = np.min(D_k, axis=1)
    avg_withinSS.append(np.mean(dist))


fig = px.line(x=number_of_cluster, y=avg_withinSS, markers=True)
fig.update_xaxes(title_text='Number of Clusters')
fig.update_yaxes(title_text='Average Within Sum of Squares')
fig.update_layout(title='Average WCSS vs Number of Clusters', width=900)

fig.show()

"""At first glance we can segment with 5 or 6 clusters because it is the most significant decrease, this method is very objective so it will use our perspective by also comparing it with other metrics."""

kmeans_models = [KMeans(n_clusters=k, n_init=20, random_state=23).fit(X_pca_4) for k in range (1, 10)]
innertia = [model.inertia_ for model in kmeans_models]

plt.plot(range(1, 10), innertia)
plt.title('Elbow method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

"""It seems like the elbow is around 5. We will use silhouette score to see which one performs better."""

from sklearn.metrics import silhouette_score

silhoutte_scores = [silhouette_score(X_pca_4, model.labels_) for model in kmeans_models[2:7]]
plt.plot(range(3,8), silhoutte_scores, "bo-")
plt.xticks([3, 4, 5, 6,7])
plt.title('Silhoutte scores vs Number of clusters')
plt.xlabel('Number of clusters')
plt.ylabel('Silhoutte score')
plt.show()

"""n=6 seems to have a higher silhouette than others."""

from sklearn.model_selection import GridSearchCV
from sklearn.metrics import silhouette_score
def silhouette_scorer(estimator, X):
    labels = estimator.fit_predict(X)
    score = silhouette_score(X, labels)
    return score
param_grid = {
    'n_clusters': [3, 4, 5,6],
    'max_iter': [200, 300, 500, 1000],
    'tol': [0.1, 0.01, 1e-4, 1e-5, 1e-6],
}
kmeans = KMeans(init ='k-means++', n_init=20, random_state=42)
grid_search = GridSearchCV(estimator=kmeans, param_grid=param_grid, cv=5, scoring=silhouette_scorer)
grid_search.fit(X_pca_4)
best_params=grid_search.best_params_
print("Best Parameters:", best_params)
print("Best Silhouette Score:", grid_search.best_score_)

"""# 6. Model Evaluation and Inference.

## 6.1 Cluster Visualization (2D)
"""

kmeans = KMeans(**best_params, n_init=20, random_state=42)
kmeans.fit(X_pca_4)
print('Silhoutte score of our model is ' + str(silhouette_score(X_pca_4, kmeans.labels_)))

"""Assigning labels as cluster index to our dataset."""

df_new['cluster_id'] = kmeans.labels_
df_new

colors = ['blue', 'red', 'green', 'purple', 'orange']
plt.figure(figsize=(8, 6))
for cluster in range(max(df_new['cluster_id']) + 1):
    plt.scatter(X_pca_4[df_new['cluster_id'] == cluster, 0], X_pca_4[df_new['cluster_id'] == cluster, 1],
                color=colors[cluster], label=f'Cluster {cluster}')

plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('Cluster Visualization')
plt.legend()
plt.colorbar(label='Cluster')
plt.show()

"""## 6.2 3D plot:"""

colors = ['blue', 'red', 'green', 'purple', 'orange']
fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')
for cluster in range(max(df_new['cluster_id']) + 1):
    ax.scatter(X_pca_4[df_new['cluster_id'] == cluster, 0],
               X_pca_4[df_new['cluster_id'] == cluster, 1],
               X_pca_4[df_new['cluster_id'] == cluster, 2],
               color=colors[cluster], label=f'Cluster {cluster}')
ax.set_xlabel('Principal Component 1')
ax.set_ylabel('Principal Component 2')
ax.set_zlabel('Principal Component 3')
ax.set_title('Cluster Visualization')
ax.legend()
plt.show()

km_clt = KMeans(**best_params, n_init=20, random_state=42)
clusters = km_clt.fit_predict(X_pca_4)
X_pca = pd.DataFrame(X_pca_4, columns=[f'PC{i+1}' for i in range(4)])
X_pca['Clusters'] = clusters

pca = PCA(n_components=3)
X_pca_vis = pca.fit_transform(X_pca)
X_pca_vis = pd.DataFrame(X_pca_vis, columns=['PC1', 'PC2', 'PC3'])
X_pca_vis['Clusters'] = clusters

scatter = []
colors = ['green', 'blue', 'red', 'yellow', 'orange']
for i in range(5):
    cluster_data = X_pca_vis[X_pca_vis['Clusters'] == i]
    scatter.append(go.Scatter3d(
        mode='markers',
        name=f'Cluster {i + 1}',
        x=cluster_data['PC1'],
        y=cluster_data['PC2'],
        z=cluster_data['PC3'],
        marker=dict(size=2, color=colors[i])
    ))

layout = go.Layout(
    title='3D Scatter Plot of Clusters',
    scene=dict(
        xaxis_title='PC1',
        yaxis_title='PC2',
        zaxis_title='PC3'
    )
)

fig = go.Figure(data=scatter, layout=layout)
fig.show()

"""## 6.3. Cluster Analysis"""

df['cluster_id'] = clusters
cluster_0 = df[df['cluster_id'] == 0]
cluster_1 = df[df['cluster_id'] == 1]
cluster_2 = df[df['cluster_id'] == 2]
cluster_3 = df[df['cluster_id'] == 3]
cluster_4 = df[df['cluster_id'] == 4]

need_columns = ['BALANCE', 'PURCHASES', 'CASH_ADVANCE', 'CREDIT_LIMIT', 'PAYMENTS']
d={}
for i in need_columns:
    d[i] = pd.DataFrame(df.groupby('cluster_id')[i].describe()[['mean', '50%', 'min', 'max']])

pd.concat(d, axis =1)

plt.figure(figsize=(21,5))
plt.subplot(1,5,1)
sns.histplot(cluster_0['BALANCE'], color = 'red')
plt.title('cluster 0', size = 16)
plt.subplot(1,5,2)
sns.histplot(cluster_1['BALANCE'], color='green' )
plt.title('cluster 1', size = 16)
plt.subplot(1,5,3)
sns.histplot(cluster_2['BALANCE'], color='blue')
plt.title('cluster 2', size = 16)
plt.subplot(1,5,4)
sns.histplot(cluster_3['BALANCE'], color='purple')
plt.title('cluster 3', size = 16)
plt.subplot(1,5,5)
sns.histplot(cluster_4['BALANCE'], color='orange')
plt.title('cluster 4', size = 16)
plt.show()

plt.figure(figsize=(21,5))
plt.subplot(1,5,1)
sns.histplot(cluster_0['PURCHASES'], color = 'red')
plt.title('cluster 0', size = 16)
plt.subplot(1,5,2)
sns.histplot(cluster_1['PURCHASES'], color='green' )
plt.title('cluster 1', size = 16)
plt.subplot(1,5,3)
sns.histplot(cluster_2['PURCHASES'], color='blue')
plt.title('cluster 2', size = 16)
plt.subplot(1,5,4)
sns.histplot(cluster_3['PURCHASES'], color='purple')
plt.title('cluster 3', size = 16)
plt.subplot(1,5,5)
sns.histplot(cluster_4['PURCHASES'], color='orange')
plt.title('cluster 4', size = 16)
plt.show()

plt.figure(figsize=(10,4))
ax = pd.DataFrame({'Cluster' : ['Cluster 0', 'Cluster 0', 'Cluster 1', 'Cluster 1', 'Cluster 2', 'Cluster 2', 'Cluster 3', 'Cluster 3', 'Cluster 4', 'Cluster 4'],
                    'Purchases' : [cluster_0['ONEOFF_PURCHASES_FREQUENCY'].sum(),
                                   cluster_0['PURCHASES_INSTALLMENTS_FREQUENCY'].sum(),
                                   cluster_1['ONEOFF_PURCHASES_FREQUENCY'].sum(),
                                   cluster_1['PURCHASES_INSTALLMENTS_FREQUENCY'].sum(),
                                   cluster_2['ONEOFF_PURCHASES_FREQUENCY'].sum(),
                                   cluster_2['PURCHASES_INSTALLMENTS_FREQUENCY'].sum(),
                                   cluster_3['ONEOFF_PURCHASES_FREQUENCY'].sum(),
                                   cluster_3['PURCHASES_INSTALLMENTS_FREQUENCY'].sum(),
                                   cluster_4['ONEOFF_PURCHASES_FREQUENCY'].sum(),
                                   cluster_4['PURCHASES_INSTALLMENTS_FREQUENCY'].sum()],
                    'Purchases Method' : ['one off', 'installments', 'one off', 'installments', 'one off', 'installments', 'one off', 'installments', 'one off', 'installments']})
sns.barplot(x='Cluster', y='Purchases', data=ax, hue = 'Purchases Method' )
plt.ylabel('Total Purchases (Million)')
plt.title('Purchases Persentage', size = 20)

plt.figure(figsize=(21,4))
plt.subplot(1,5,1)
sns.histplot(cluster_0['CASH_ADVANCE'], color = 'red')
plt.title('cluster 0', size = 16)
plt.subplot(1,5,2)
sns.histplot(cluster_1['CASH_ADVANCE'], color='green' )
plt.title('cluster 1', size = 16)
plt.subplot(1,5,3)
sns.histplot(cluster_2['CASH_ADVANCE'], color='blue')
plt.title('cluster 2', size = 16)
plt.subplot(1,5,4)
sns.histplot(cluster_3['CASH_ADVANCE'], color='purple')
plt.title('cluster 3', size = 16)
plt.subplot(1,5,5)
sns.histplot(cluster_4['CASH_ADVANCE'], color='orange')
plt.title('cluster 4', size = 16)
plt.show()

plt.figure(figsize=(21,5))
plt.subplot(1,5,1)
sns.histplot(cluster_0['CREDIT_LIMIT'], color = 'red')
plt.title('cluster 0', size = 16)
plt.subplot(1,5,2)
sns.histplot(cluster_1['CREDIT_LIMIT'], color='green' )
plt.title('cluster 1', size = 16)
plt.subplot(1,5,3)
sns.histplot(cluster_2['CREDIT_LIMIT'], color='blue')
plt.title('cluster 2', size = 16)
plt.subplot(1,5,4)
sns.histplot(cluster_3['CREDIT_LIMIT'], color='purple')
plt.title('cluster 3', size = 16)
plt.subplot(1,5,5)
sns.histplot(cluster_4['CREDIT_LIMIT'], color='orange')
plt.title('cluster 4', size = 16)
plt.show()

plt.figure(figsize=(21,5))
plt.subplot(1,5,1)
sns.histplot(cluster_0['PAYMENTS'], color = 'red')
plt.title('cluster 0', size = 16)
plt.subplot(1,5,2)
sns.histplot(cluster_1['PAYMENTS'], color='green' )
plt.title('cluster 1', size = 16)
plt.subplot(1,5,3)
sns.histplot(cluster_2['PAYMENTS'], color='blue')
plt.title('cluster 2', size = 16)
plt.subplot(1,5,4)
sns.histplot(cluster_3['PAYMENTS'], color='purple')
plt.title('cluster 3', size = 16)
plt.subplot(1,5,5)
sns.histplot(cluster_4['PAYMENTS'], color='orange')
plt.title('cluster 4', size = 16)
plt.show()

plt.figure(figsize=(10, 4))
sns.scatterplot(data=df, x='PURCHASES', y='BALANCE', hue='cluster_id', palette=['red', 'yellow', 'blue', 'purple', 'green'])
plt.show()

plt.figure(figsize=(16, 10))

plt.subplot(2, 5, 1)
sns.scatterplot(x=cluster_0['PURCHASES'], y=cluster_0['BALANCE'], color='red')
plt.title('Cluster 0', size=16)

plt.subplot(2, 5, 2)
sns.scatterplot(x=cluster_1['PURCHASES'], y=cluster_1['BALANCE'], color='yellow')
plt.title('Cluster 1', size=16)

plt.subplot(2, 5, 3)
sns.scatterplot(x=cluster_2['PURCHASES'], y=cluster_2['BALANCE'], color='blue')
plt.title('Cluster 2', size=16)

plt.subplot(2, 5, 4)
sns.scatterplot(x=cluster_3['PURCHASES'], y=cluster_3['BALANCE'], color='purple')
plt.title('Cluster 3', size=16)

plt.subplot(2, 5, 5)
sns.scatterplot(x=cluster_4['PURCHASES'], y=cluster_4['BALANCE'], color='green')
plt.title('Cluster 4', size=16)

plt.show()

plt.figure(figsize=(21,5))
plt.subplot(1,5,1)
sns.histplot(cluster_0['PURCHASES_FREQUENCY'], color = 'red')
plt.title('cluster 0', size = 16)
plt.subplot(1,5,2)
sns.histplot(cluster_1['PURCHASES_FREQUENCY'], color='green')
plt.title('cluster 1', size = 16)
plt.subplot(1,5,3)
sns.histplot(cluster_2['PURCHASES_FREQUENCY'], color='blue')
plt.title('cluster 2', size = 16)
plt.subplot(1,5,4)
sns.histplot(cluster_3['PURCHASES_FREQUENCY'], color='purple')
plt.title('cluster 3', size = 16)
plt.subplot(1,5,5)
sns.histplot(cluster_4['PURCHASES_FREQUENCY'], color='pink')
plt.title('cluster 4', size = 16)
plt.show()

plt.figure(figsize=(21,5))
plt.subplot(1,5,1)
sns.histplot(cluster_0['ONEOFF_PURCHASES_FREQUENCY'], color = 'red')
plt.title('cluster 0', size = 16)
plt.subplot(1,5,2)
sns.histplot(cluster_1['ONEOFF_PURCHASES_FREQUENCY'], color='green')
plt.title('cluster 1', size = 16)
plt.subplot(1,5,3)
sns.histplot(cluster_2['ONEOFF_PURCHASES_FREQUENCY'], color='blue')
plt.title('cluster 2', size = 16)
plt.subplot(1,5,4)
sns.histplot(cluster_3['ONEOFF_PURCHASES_FREQUENCY'], color='purple')
plt.title('cluster 3', size = 16)
plt.subplot(1,5,5)
sns.histplot(cluster_4['ONEOFF_PURCHASES_FREQUENCY'], color='pink')
plt.title('cluster 4', size = 16)
plt.show()

plt.figure(figsize=(21,5))
plt.subplot(1,5,1)
sns.histplot(cluster_0['PURCHASES_INSTALLMENTS_FREQUENCY'], color = 'red')
plt.title('cluster 0', size = 16)
plt.subplot(1,5,2)
sns.histplot(cluster_1['PURCHASES_INSTALLMENTS_FREQUENCY'], color='green')
plt.title('cluster 1', size = 16)
plt.subplot(1,5,3)
sns.histplot(cluster_2['PURCHASES_INSTALLMENTS_FREQUENCY'], color='blue')
plt.title('cluster 2', size = 16)
plt.subplot(1,5,4)
sns.histplot(cluster_3['PURCHASES_INSTALLMENTS_FREQUENCY'], color='purple')
plt.title('cluster 3', size = 16)
plt.subplot(1,5,5)
sns.histplot(cluster_4['PURCHASES_INSTALLMENTS_FREQUENCY'], color='pink')
plt.title('cluster 4', size = 16)
plt.show()

plt.figure(figsize=(21,5))
plt.subplot(1,5,1)
sns.histplot(cluster_0['CASH_ADVANCE_FREQUENCY'], color = 'red')
plt.title('cluster 0', size = 16)
plt.subplot(1,5,2)
sns.histplot(cluster_1['CASH_ADVANCE_FREQUENCY'], color='green')
plt.title('cluster 1', size = 16)
plt.subplot(1,5,3)
sns.histplot(cluster_2['CASH_ADVANCE_FREQUENCY'], color='blue')
plt.title('cluster 2', size = 16)
plt.subplot(1,5,4)
sns.histplot(cluster_3['CASH_ADVANCE_FREQUENCY'], color='purple')
plt.title('cluster 3', size = 16)
plt.subplot(1,5,5)
sns.histplot(cluster_4['CASH_ADVANCE_FREQUENCY'], color='pink')
plt.title('cluster 4', size = 16)
plt.show()

fig = go.Figure()

def cluster3d(cluster, color):
    fig.add_trace(go.Scatter3d(
        x=df[df.cluster_id == cluster]['ONEOFF_PURCHASES_FREQUENCY'],
        y=df[df.cluster_id == cluster]['PURCHASES_INSTALLMENTS_FREQUENCY'],
        z=df[df.cluster_id == cluster]['CASH_ADVANCE_FREQUENCY'],
        mode='markers',
        name=f'Cluster {cluster}',
        marker_color=color,
        marker_size=5))


for C in list(df.cluster_id.unique()):
    if C == 0:
        cluster3d(0, 'red')
    elif C == 1:
        cluster3d(1, 'green')
    elif C == 2:
        cluster3d(2, 'blue')
    elif C == 3:
        cluster3d(3, 'purple')
    elif C == 4:
        cluster3d(3, 'purple')

fig.update_layout(height=900, width=1100,
                  scene=dict(
                      xaxis_title='ONEOFF_PURCHASES_FREQUENCY',
                      yaxis_title='PURCHASES_INSTALLMENTS_FREQUENCY',
                      zaxis_title='CASH_ADVANCE_FREQUENCY'),
                  title_text='A 3D Projection Of Data In The Reduced Dimension')
fig.show()

cluster_0[['BALANCE','PURCHASES', 'ONEOFF_PURCHASES', 'INSTALLMENTS_PURCHASES', 'CASH_ADVANCE', 'CREDIT_LIMIT', 'PAYMENTS']].describe().T

"""**Cluster 0 - Behavior**
* Balance: Average balance is around 2,293, with most balances falling between 956 and 2,933. A few customers hold significantly higher balances.

* Purchases: Low purchase activity, with an average of 37 and median of $0. Most customers make no purchases.

* One-off Purchases: Similar pattern to purchases, with an average of 34 and most customers making no one-off purchases.

* Installments Purchases: Very low installment purchases, with an average of 2.50, and most customers making none.

* Cash Advance: High reliance on cash advances, with an average of 2,023. Many customers take out substantial amounts.

* Credit Limit: Average credit limit of 4,121, but wide variation from 50 to 19,000.

* Payments: Average payments of $1,639, but most customers make low payments relative to their balances.

**Key Insights**
* Low Purchase Activity: Most customers in this cluster are not making purchases, especially not one-off or installment purchases.

* High Cash Advance Usage: A large proportion of the balance and activity is in the form of cash advances, with many customers relying heavily on them.

* Moderate Credit Limits and Payments: Credit limits and payments vary widely. Some customers have high limits and make large payments, but the majority are making lower payments.
"""

cluster_1[['BALANCE','PURCHASES', 'ONEOFF_PURCHASES', 'INSTALLMENTS_PURCHASES', 'CASH_ADVANCE', 'CREDIT_LIMIT', 'PAYMENTS']].describe().T

"""**Cluster 1 - Behavior**
* Balance: The average balance is 408, with most balances under 524, indicating low balances overall. There are some outliers with higher balances.

* Purchases: The average purchases are 594, with most customers spending between 237 and 720. Some outliers have purchases up to 12,375.

* One-off Purchases: Very low one-off purchases with an average of 31, and most customers making no one-off purchases.

* Installments Purchases: High installment purchases with an average of 564, indicating that most customers prefer to make purchases in installments.

* Cash Advance: Minimal reliance on cash advances, with an average of 40 and most customers not using cash advances at all.

* Credit Limit: The average credit limit is 2,877, with a range from 300 to 21,500.

* ayments: Average payments of 744, with most customers making moderate payments between 263 and 922. Some outliers make large payments up to 15,246.
  
**Key Insights**

* Low Balance: Customers generally maintain low balances.
High Purchase Activity: Frequent card usage with significant purchase activity.

* Low One-off Purchases: Rarely make one-off purchases.

* High Installment Purchases: Significant use of installment options.

* Minimal Cash Advance Usage: Rarely use cash advances.

* Moderate Credit Limits: Credit limits are average, with wide variation.

* Moderate Payments: Regular but moderate payments.
"""

cluster_2[['BALANCE','PURCHASES', 'ONEOFF_PURCHASES', 'INSTALLMENTS_PURCHASES', 'CASH_ADVANCE', 'CREDIT_LIMIT', 'PAYMENTS']].describe().T

"""**Cluster 2 - Behavior**
* High Balance: Customers maintain high average balances, averaging around 3,431. Many have balances reaching up to 16,305.

* High Purchase Activity: They make substantial purchases, averaging 1,408, with some customers spending as much as 22,102.

* High One-off Purchases: Frequent large one-off purchases, with an average of 823 and some up to 22,102.

* High Installment Purchases: Significant use of installment payments, averaging 585, with some reaching 14,686.

* High Cash Advance Usage: Heavy reliance on cash advances, averaging 2,766, and some customers take out amounts as high as 47,137.

* High Credit Limits: Average credit limits are high, averaging 6,002, with limits up to 30,000.

* High Payments: They make large payments, averaging 3,049, with some payments reaching 40,628.

**Key Insights:**

* Financial Flexibility: Customers in this cluster have high balances and credit limits, indicating financial flexibility and capacity for substantial transactions.

* Heavy Card Usage: They are active in using their credit cards for both large one-off and installment purchases, as well as cash advances.

* Strong Payment Behavior: Despite the high balances and large cash advances, these customers make significant payments, suggesting strong payment capabilities or strategies to manage their credit efficiently.
"""

cluster_3[['BALANCE','PURCHASES', 'ONEOFF_PURCHASES', 'INSTALLMENTS_PURCHASES', 'CASH_ADVANCE', 'CREDIT_LIMIT', 'PAYMENTS']].describe().T

"""**Cluster 3 - Behavior:**

* Low Balance: Customers maintain low balances, with an average of 296. Most balances are below 310.

* Moderate Purchase Activity: Average purchase amount is 330, with spending ranging from 53 to 3,950.

* Low One-off Purchases: One-off purchases average 293, but with a wide range, indicating some high-value transactions.

* Low Installment Purchases: Minimal installment purchases, averaging 37, with many customers making none.

* Low Cash Advance Usage: Average cash advance is 120, showing limited use of cash advances.

* Moderate Credit Limits: Average credit limit is 3,549, with a range from 150 to 23,000.

**Key Insights:**

* Low Utilization: Customers in this cluster have low average balances and minimal engagement in high-value purchases or cash advances.

* Limited High-Value Transactions: While some high-value purchases occur, most spending is moderate.

* Credit Limit Variation: Credit limits are relatively high compared to usage, indicating potential for increased card utilization.

* Potential for Increased Engagement: There is an opportunity to encourage more use of credit lines, especially for purchases and cash advances, given the low engagement with high-value transactions.
"""

cluster_4[['BALANCE','PURCHASES', 'ONEOFF_PURCHASES', 'INSTALLMENTS_PURCHASES', 'CASH_ADVANCE', 'CREDIT_LIMIT', 'PAYMENTS']].describe().T

"""**Cluster 4 - Behavior:**

* High Balance: Customers maintain high average balances, averaging 1,480, with many having balances up to 19,043.

* High Purchase Activity: Significant average purchases of 2,791, with some customers spending up to 49,040.

* High One-off Purchases: Average one-off purchases are substantial at 1,891, with a maximum of 40,761.

* High Installment Purchases: Significant average installment purchases of 900, with some as high as 22,500.

* Low Cash Advance Usage: Minimal average cash advance of 55, with limited usage overall.

* High Credit Limits: Average credit limit is high at 6,226, with limits ranging up to 30,000.

* High Payments: High average payments of 2,636, with some payments reaching  50,721.

**Key Insights:**

* High Engagement: Cluster 4 customers show high engagement with their credit cards, including substantial balances, large purchases, and significant installment payments.
* Heavy Use of Credit Facilities: They utilize their credit cards extensively for both one-off and installment purchases, though they rarely use cash advances.
* Strong Financial Capability: They have high credit limits and make large payments, indicating robust financial activity and a strong capacity to manage their credit.

# 7 . Summary and Recommendations

##Cluster 0:

**Summary:**
Customers maintain moderate balances and make low purchases, with a heavy reliance on cash advances. They have moderate credit limits and make moderate payments.

**Recommendations:**
* Promote Balance Management: Encourage customers to use their credit line more efficiently by offering tools for balance tracking and alerts.
* Incentivize Purchases: Provide promotions or rewards to increase purchase activity, especially for one-off and installment purchases.
* Manage Cash Advances: Introduce incentives or educational content about managing cash advances and alternative options.

##Cluster 1:

**Summary:** Customers have low balances and credit limits, but high purchase activity, particularly with installment purchases. They rarely use cash advances and make moderate payments.

**Recommendations:**
* Offer Higher Credit Limits: Consider increasing credit limits for these customers to enhance their purchasing power.
* Encourage One-off Purchases: Develop targeted offers or rewards to incentivize one-off purchases.
* Promote Financial Management Tools: Offer tools or advice to help manage and optimize credit card use.

##Cluster 2:
**Summary:**
 Customers have high balances and credit limits, with substantial purchase and installment activity. They make significant cash advances and payments.

**Recommendations:**
Tailor Premium Services: Offer premium services or exclusive rewards to match their high engagement and spending levels.
Optimize Cash Advance Options: Provide personalized cash advance offers or strategies to manage large transactions.
Enhance Financial Planning Tools: Offer advanced financial management tools to help them manage their high credit utilization and payments effectively.

##Cluster 3:
**Summary:**
 Customers maintain low balances with minimal purchase activity and cash advances. Their credit limits are moderate, and they make low payments.

**Recommendations:**
Increase Engagement: Develop strategies to increase card usage, such as targeted promotions or educational campaigns about benefits.
Encourage Higher Usage: Provide incentives for larger transactions or more frequent use of credit facilities.
Review Credit Limits: Assess the appropriateness of their credit limits and consider adjustments based on increased engagement.

##Cluster 4:
**Summary:** Customers exhibit high balances and credit limits with substantial purchase and installment activity. They have high payments and minimal cash advance use.

**Recommendations:**
* Leverage High Engagement: Offer exclusive rewards or benefits to further enhance their engagement.
* Promote Balanced Usage: Encourage a balanced approach to credit utilization, ensuring they maximize benefits across all areas of card use.
* Personalized Financial Advice: Provide personalized financial planning and advisory services to optimize their credit card usage and manage large transactions effectively.
"""